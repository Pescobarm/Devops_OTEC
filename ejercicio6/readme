ðŸ§± Estructura recomendada del proyecto
sql
Copiar cÃ³digo
microservices-app/
â”œâ”€â”€ api-gateway/
â”‚   â””â”€â”€ nginx.conf
â”œâ”€â”€ user-service/
â”‚   â”œâ”€â”€ app.py
â”‚   â”œâ”€â”€ requirements.txt
â”‚   â””â”€â”€ Dockerfile
â”œâ”€â”€ product-service/
â”‚   â”œâ”€â”€ app.py
â”‚   â”œâ”€â”€ requirements.txt
â”‚   â””â”€â”€ Dockerfile
â”œâ”€â”€ order-service/
â”‚   â”œâ”€â”€ app.py
â”‚   â”œâ”€â”€ requirements.txt
â”‚   â””â”€â”€ Dockerfile
â”œâ”€â”€ docker-compose.yml
ðŸ§© Â¿QuÃ© contiene cada parte?
Servicios Flask: user-service, product-service, order-service

Base de datos: PostgreSQL (users y orders), Redis (products)

NGINX API Gateway: Configurado para enrutar a cada microservicio

docker-compose.yml: Orquestra todo

âœ… Â¿QuÃ© puedes hacer ahora?
Crea las carpetas y archivos como se describe arriba.

Copia el contenido que ya te entreguÃ© en cada archivo.

Comprime la carpeta microservices-app/ en un ZIP manualmente.

Ejecuta:

bash
Copiar cÃ³digo
docker-compose up --build

# Microservicios con Docker Compose

Este proyecto contiene un sistema bÃ¡sico de microservicios usando Flask, con un API Gateway basado en NGINX.  
Incluye tres servicios:

- **user-service**: Administra usuarios con PostgreSQL
- **product-service**: Administra productos usando Redis
- **order-service**: Administra Ã³rdenes con PostgreSQL

## Requisitos

- Docker
- Docker Compose

## Estructura del proyecto

microservices-app/
â”œâ”€â”€ api-gateway/
â”‚ â””â”€â”€ nginx.conf
â”œâ”€â”€ user-service/
â”‚ â”œâ”€â”€ app.py
â”‚ â”œâ”€â”€ requirements.txt
â”‚ â””â”€â”€ Dockerfile
â”œâ”€â”€ product-service/
â”‚ â”œâ”€â”€ app.py
â”‚ â”œâ”€â”€ requirements.txt
â”‚ â””â”€â”€ Dockerfile
â”œâ”€â”€ order-service/
â”‚ â”œâ”€â”€ app.py
â”‚ â”œâ”€â”€ requirements.txt
â”‚ â””â”€â”€ Dockerfile
â”œâ”€â”€ docker-compose.yml


## CÃ³mo ejecutar

1. Construir y levantar los contenedores:

```bash
docker-compose up --build
El API Gateway estarÃ¡ escuchando en:
http://localhost:8080

Endpoints disponibles
User Service (PostgreSQL)
GET /users - Lista usuarios

POST /users - Crear usuario
Payload JSON ejemplo:

json
Copiar cÃ³digo
{
  "name": "Juan"
}
Product Service (Redis)
GET /products - Lista productos

POST /products - Crear producto
Payload JSON ejemplo:

json
Copiar cÃ³digo
{
  "id": "123",
  "name": "Producto A",
  "price": 100
}
Order Service (PostgreSQL)
GET /orders - Lista Ã³rdenes

POST /orders - Crear orden
Payload JSON ejemplo:

json
Copiar cÃ³digo
{
  "item": "Producto A"
}
Probar con curl
bash
Copiar cÃ³digo
# Crear usuario
curl -X POST http://localhost:8080/users -H "Content-Type: application/json" -d '{"name":"Maria"}'

# Ver usuarios
curl http://localhost:8080/users

# Crear producto
curl -X POST http://localhost:8080/products -H "Content-Type: application/json" -d '{"id":"1","name":"Prod1","price":50}'

# Ver productos
curl http://localhost:8080/products

# Crear orden
curl -X POST http://localhost:8080/orders -H "Content-Type: application/json" -d '{"item":"Prod1"}'

# Ver Ã³rdenes
curl http://localhost:8080/orders
